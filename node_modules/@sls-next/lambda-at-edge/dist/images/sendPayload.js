"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendEtagResponse = exports.sendPayload = void 0;
const utils_1 = require("../lib/utils");
const etag_1 = __importDefault(require("etag"));
const fresh_1 = __importDefault(require("next/dist/compiled/fresh"));
function sendPayload(req, res, payload, type, { generateEtags, poweredByHeader }, options) {
    if (utils_1.isResSent(res)) {
        return;
    }
    if (poweredByHeader && type === "html") {
        res.setHeader("X-Powered-By", "Next.js");
    }
    const etag = generateEtags ? etag_1.default(payload) : undefined;
    if (sendEtagResponse(req, res, etag)) {
        return;
    }
    if (!res.getHeader("Content-Type")) {
        res.setHeader("Content-Type", type === "json" ? "application/json" : "text/html; charset=utf-8");
    }
    res.setHeader("Content-Length", Buffer.byteLength(payload));
    if (options != null) {
        if (options.private || options.stateful) {
            if (options.private || !res.hasHeader("Cache-Control")) {
                res.setHeader("Cache-Control", `private, no-cache, no-store, max-age=0, must-revalidate`);
            }
        }
        else if (typeof options.revalidate === "number") {
            if (options.revalidate < 1) {
                throw new Error(`invariant: invalid Cache-Control duration provided: ${options.revalidate} < 1`);
            }
            res.setHeader("Cache-Control", `s-maxage=${options.revalidate}, stale-while-revalidate`);
        }
        else if (options.revalidate === false) {
            res.setHeader("Cache-Control", `s-maxage=31536000, stale-while-revalidate`);
        }
    }
    res.end(req.method === "HEAD" ? null : payload);
}
exports.sendPayload = sendPayload;
function sendEtagResponse(req, res, etag) {
    if (etag) {
        res.setHeader("ETag", etag);
    }
    if (fresh_1.default(req.headers, { etag })) {
        res.statusCode = 304;
        res.end();
        return true;
    }
    return false;
}
exports.sendEtagResponse = sendEtagResponse;

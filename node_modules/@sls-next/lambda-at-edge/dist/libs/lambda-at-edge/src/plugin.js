"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const deployer_1 = __importDefault(require("./deployer"));
const build_1 = __importDefault(require("./build"));
class LambdaAtEdgePlugin {
    constructor(inputs, context) {
        this.inputs = inputs;
        this.context = context;
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            const inputs = this.inputs;
            const nextConfigPath = inputs.nextConfigDir
                ? path_1.resolve(inputs.nextConfigDir)
                : process.cwd();
            const nextStaticPath = inputs.nextStaticDir
                ? path_1.resolve(inputs.nextStaticDir)
                : nextConfigPath;
            const buildCwd = typeof inputs.build === "boolean" ||
                typeof inputs.build === "undefined" ||
                !inputs.build.cwd
                ? nextConfigPath
                : path_1.resolve(inputs.build.cwd);
            const buildConfig = Object.assign(Object.assign({ enabled: inputs.build
                    ?
                        inputs.build !== false && inputs.build.enabled !== false
                    : true, cmd: "node_modules/.bin/next", args: ["build"] }, (typeof inputs.build === "object" ? inputs.build : {})), { cwd: buildCwd });
            if (buildConfig.enabled) {
                const builder = new build_1.default(nextConfigPath, path_1.join(nextConfigPath, ".serverless_nextjs"), {
                    cmd: buildConfig.cmd,
                    cwd: buildConfig.cwd,
                    env: buildConfig.env,
                    args: buildConfig.args,
                    useServerlessTraceTarget: inputs.useServerlessTraceTarget || false,
                    logLambdaExecutionTimes: inputs.logLambdaExecutionTimes || false,
                    domainRedirects: inputs.domainRedirects || {},
                    minifyHandlers: inputs.minifyHandlers || false,
                    enableHTTPCompression: false,
                    handler: inputs.handler
                        ? `${inputs.handler.split(".")[0]}.js`
                        : undefined
                }, nextStaticPath);
                yield builder.build(this.context.instance.debugMode);
            }
        });
    }
    deploy() {
        return __awaiter(this, void 0, void 0, function* () {
            const deployer = new deployer_1.default(this.inputs);
            return yield deployer.deploy();
        });
    }
    remove() {
        return __awaiter(this, void 0, void 0, function* () {
            const deployer = new deployer_1.default(this.inputs);
            yield deployer.remove();
        });
    }
}
exports.default = LambdaAtEdgePlugin;
